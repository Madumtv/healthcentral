
import { useState } from "react";
import { toast } from "sonner";
import { supabase } from "@/integrations/supabase/client";
import { User } from "@supabase/supabase-js";

interface UseAvatarUploadProps {
  user: User | null;
  currentAvatarUrl?: string | null;
  onAvatarUpdate: (avatarUrl: string) => void;
}

export function useAvatarUpload({ user, currentAvatarUrl, onAvatarUpdate }: UseAvatarUploadProps) {
  const [uploading, setUploading] = useState(false);
  const [localAvatarUrl, setLocalAvatarUrl] = useState(currentAvatarUrl);

  const uploadAvatar = async (event: React.ChangeEvent<HTMLInputElement>) => {
    try {
      setUploading(true);
      console.log("üîÑ D√©but de l'upload d'avatar...");

      if (!event.target.files || event.target.files.length === 0) {
        throw new Error('Vous devez s√©lectionner une image √† t√©l√©charger.');
      }

      if (!user?.id) {
        throw new Error('Utilisateur non connect√©.');
      }

      const file = event.target.files[0];
      console.log("üìÅ Fichier s√©lectionn√©:", file.name, "Taille:", file.size);
      
      // V√©rifier la taille du fichier (max 5MB)
      if (file.size > 5 * 1024 * 1024) {
        throw new Error('La taille du fichier ne doit pas d√©passer 5MB.');
      }

      // V√©rifier le type de fichier
      if (!file.type.startsWith('image/')) {
        throw new Error('Veuillez s√©lectionner un fichier image.');
      }

      const fileExt = file.name.split('.').pop();
      const fileName = `avatar-${Date.now()}.${fileExt}`;
      const filePath = `${user.id}/${fileName}`;

      console.log("üì§ Upload du fichier vers:", filePath);

      // Supprimer l'ancien avatar s'il existe
      if (currentAvatarUrl) {
        try {
          const oldPath = currentAvatarUrl.split('/').slice(-2).join('/');
          console.log("üóëÔ∏è Suppression de l'ancien avatar:", oldPath);
          const { error: deleteError } = await supabase.storage
            .from('avatars')
            .remove([oldPath]);
          
          if (deleteError) {
            console.warn("‚ö†Ô∏è Impossible de supprimer l'ancien avatar:", deleteError);
          }
        } catch (error) {
          console.warn("‚ö†Ô∏è Erreur lors de la suppression de l'ancien avatar:", error);
        }
      }

      // Upload du nouveau fichier
      const { data: uploadData, error: uploadError } = await supabase.storage
        .from('avatars')
        .upload(filePath, file, { 
          upsert: true,
          contentType: file.type
        });

      if (uploadError) {
        console.error("‚ùå Erreur upload:", uploadError);
        throw new Error(`Erreur lors de l'upload: ${uploadError.message}`);
      }

      console.log("‚úÖ Fichier upload√© avec succ√®s:", uploadData);

      // Obtenir l'URL publique avec un timestamp pour √©viter le cache
      const { data: urlData } = supabase.storage
        .from('avatars')
        .getPublicUrl(filePath);

      const avatarUrl = `${urlData.publicUrl}?t=${Date.now()}`;
      console.log("üîó URL publique g√©n√©r√©e:", avatarUrl);

      // Mettre √† jour le profil dans la base de donn√©es
      console.log("üíæ Mise √† jour du profil en base...");
      const { data: updateData, error: updateError } = await supabase
        .from('profiles')
        .update({ 
          avatar_url: avatarUrl,
          updated_at: new Date().toISOString() 
        })
        .eq('id', user.id)
        .select();

      if (updateError) {
        console.error("‚ùå Erreur mise √† jour profil:", updateError);
        throw new Error(`Erreur lors de la mise √† jour du profil: ${updateError.message}`);
      }

      console.log("‚úÖ Profil mis √† jour en base:", updateData);

      // Mettre √† jour l'√©tat local imm√©diatement
      setLocalAvatarUrl(avatarUrl);
      
      // Notifier le composant parent
      onAvatarUpdate(avatarUrl);
      toast.success('Avatar mis √† jour avec succ√®s !');

      // Vider le champ de fichier pour permettre de re-uploader le m√™me fichier
      event.target.value = '';

    } catch (error) {
      console.error('‚ùå Erreur compl√®te lors du t√©l√©chargement:', error);
      toast.error(error instanceof Error ? error.message : 'Erreur lors du t√©l√©chargement de l\'avatar.');
    } finally {
      setUploading(false);
    }
  };

  return {
    uploading,
    localAvatarUrl,
    uploadAvatar
  };
}
